_package sw
$

_method method_finder.get_method_info_extra(method_name, class_name)
	_local method_info << property_list.new()
	_for package_name, package_data _over sw:package.all_packages.fast_keys_and_elements()
	_loop
		_local exemplar << package_data.get_value(class_name.as_symbol())
		_if exemplar.responds_to?(method_name.as_symbol(), _true)
		_then
			method_info[:method] << method_name
			real_pkg_name << exemplar.exemplar_global.package.name
			method_info[:class] << write_string(real_pkg_name, %:, class_name)
			_leave
		_endif
	_endloop
	_return method_info
_endmethod
$

_method method_finder.emacs_jump_to_method_source(method_name, class_name)
	_local method_info << _self.get_method_info_extra(method_name, class_name)
	!terminal!.write("E",write_string("(magik-cb-send-string", %space, %", "pr_source_file ", method_info[:method], %space,
					    method_info[:class], "\n", %", %)),"", %newline)
_endmethod
$

_method method.emacs_posframe
	_local (result, line_nr) << _self.method_as_string(_false)
	result << result.string.replace_all(%".write_string, write_string(%\,%"))
	source << write_string(_self.source_file.replace_all(%\.write_string, write_string(%/)),
			       "::", line_nr)
	!terminal!.write("E",
			 write_string("(magik-posframe-show ", %", result, %", %newline,
				      %", source, %",
				      %newline,
				      ")"), "", %newline)
_endmethod
$

_method method_finder.posframe_popup(method_name, class_name)
	_local method_info << _self.get_method_info_extra(method_name, class_name)
	_return write_string(method_info[:class], ".method(:|", method_info[:method], "|).emacs_posframe").sandboxed_evaluate()
_endmethod
$
